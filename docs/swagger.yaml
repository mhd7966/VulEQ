basePath: /v0
definitions:
  models.Issue:
    properties:
      actions:
        items:
          type: string
        type: array
      author:
        type: string
      comments:
        items:
          type: string
        type: array
      component:
        type: string
      creationDate:
        type: string
      debt:
        type: string
      effort:
        type: string
      flows:
        items:
          type: string
        type: array
      hash:
        type: string
      key:
        type: string
      line:
        type: integer
      message:
        type: string
      project:
        type: string
      rule:
        type: string
      scope:
        type: string
      severity:
        type: string
      status:
        type: string
      tags:
        items:
          type: string
        type: array
      textRange:
        $ref: '#/definitions/models.TextRangeStruct'
      transitions:
        items:
          type: string
        type: array
      type:
        type: string
      updateDate:
        type: string
    type: object
  models.ProjectBody:
    properties:
      del_project_id:
        type: integer
      git_branch:
        type: string
      git_commit_hash:
        type: string
      git_token:
        type: string
      git_url:
        type: string
      pipeline_id:
        type: integer
    required:
    - del_project_id
    - git_branch
    - git_commit_hash
    - git_token
    - git_url
    - pipeline_id
    type: object
  models.Scan:
    properties:
      gitCommitHash:
        type: string
      id:
        type: integer
      lineCode:
        type: string
      lineComment:
        type: string
      numBug:
        type: string
      numCodeSmell:
        type: string
      numDebt:
        type: string
      numDuplicateLine:
        type: string
      numFile:
        type: string
      numVulnerability:
        type: string
      pipelineID:
        type: integer
      projectID:
        type: integer
    type: object
  models.TextRangeStruct:
    properties:
      endLine:
        type: integer
      endOffset:
        type: integer
      startLine:
        type: integer
      startOffset:
        type: integer
    type: object
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: I have no specific description
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: VulEQ API
  version: "1.0"
paths:
  /project/{del_project_id}/issues:
    get:
      description: return all issues of a project(by del_project_id)
      operationId: get_all_issues_by_delProjectID
      parameters:
      - description: del_project_id
        in: path
        name: del_project_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Issue'
            type: array
        "400":
          description: Bad Request
          schema:
            type: json
      security:
      - ApiKeyAuth: []
      summary: get all issues
  /project/{del_project_id}/scans:
    get:
      description: return all scans info of a project(by del_project_id)
      operationId: get_all_scans_by_delProjectID
      parameters:
      - description: del_project_id
        in: path
        name: del_project_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Scan'
            type: array
        "400":
          description: Bad Request
          schema:
            type: json
      security:
      - ApiKeyAuth: []
      summary: get all scans
  /scan:
    post:
      consumes:
      - application/json
      description: if project doesn't exist, first create that then scan it else just
        clone and scan
      operationId: scan_by_del_project_id
      parameters:
      - description: Project info
        in: body
        name: projectBody
        required: true
        schema:
          $ref: '#/definitions/models.ProjectBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Scan'
        "400":
          description: Bad Request
          schema:
            type: json
      security:
      - ApiKeyAuth: []
      summary: scan project
  /scan/{scan_id}:
    get:
      description: get all information about a specific scan of project
      operationId: get_info_scan_by_scan_id
      parameters:
      - description: ID that return after scan a project
        in: path
        name: scan_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Scan'
        "400":
          description: Bad Request
          schema:
            type: json
      security:
      - ApiKeyAuth: []
      summary: get scan information
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
